(()=>{"use strict";class e{constructor(){this.projects=[],this.activeProject,console.log(this.projects)}addProject(e){return this.projects.push(e),this.projects}removeProject(e){}}class t{constructor(e){this.name=e,this.todos=[],this.id}addToDo(e){this.todos.push(e)}removeToDo(e){const t=this.todos.findIndex((t=>t.id===e));this.todos.splice(t,1),console.log(this.todos)}setId(e){this.id=e}findToDoByID(e){const t=this.todos.findIndex((t=>t.id===e));return this.todos[t]}}class o{constructor(e,t,o,s){this.title=e,this.description=t,this.date=o,this.priority=s,this.isFinished=!1,this.id,this.parentId}markAsFinished(){this.isFinished=!1===this.isFinished}setId(e){this.id=e}setParentId(e){this.parentId=e}}new class{constructor(){}};const s=new class{constructor(){}renderToDo=e=>{const t=document.querySelector("ul"),o=document.createElement("li"),s=document.createElement("div"),n=document.createElement("div"),r=document.createElement("div"),i=document.createElement("div"),l=document.createElement("div"),c=document.createElement("div"),d=document.createElement("div");d.classList.add("title-element"),s.classList.add("todo"),d.textContent=e.title,s.classList.add(`${e.priority}`),i.textContent="delete",i.classList.add("delete"),l.classList.add("finish"),l.textContent="mark",c.classList.add("show-full"),c.textContent="+",r.classList.add("btns-container"),r.appendChild(c),r.appendChild(l),r.appendChild(i),s.appendChild(d),s.appendChild(r),o.appendChild(s),n.classList.add("todo-full"),n.classList.add("hidden"),n.insertAdjacentHTML("afterbegin",`\n    \n    <p>\n      Description: ${e.description}\n    </p>\n    <p>Date: ${e.date}</p>`),o.appendChild(n),o.setAttribute("data-id",`${e.id}`),t.appendChild(o)};renderForm(){if(document.querySelector(".new-form-container"))return;const e=document.querySelector(".container"),t=document.createElement("div");t.classList.add("new-form-container");const o=document.createElement("form");o.setAttribute("action","submit"),o.insertAdjacentHTML("afterbegin",'<div class="field">\n<label for="title">Title: </label>\n<input type="text" name="title" id="title" required/>\n</div>\n<div class="field">\n<label for="description">Description: </label>\n<input type="text" name="description" id="description" required/>\n</div>\n<div class="field">\n<label for="date">Date: </label>\n<input type="date" name="date" id="date" required/>\n</div>\n<div class="radio-btn">\n<label for="low-prio">Low</label>\n<input type="radio" name="priority" id="low-prio" value="low" />\n<label for="med-prio">Medium</label>\n<input type="radio" name="priority" id="med-prio" value="med" />\n<label for="high-prio">High</label>\n<input type="radio" name="priority" id="high-prio" value="high" checked/>\n</div>\n<button type="submit">Submit</button>\n<div class="close-form"><div class="x">X</div></div>\n'),t.appendChild(o),e.insertAdjacentElement("afterbegin",t),document.querySelector(".close-form").addEventListener("click",(function(){t.remove()}))}renderProjectPreview(e){const t=document.createElement("div");t.classList.add("project");const o=document.createElement("div");o.classList.add("project-preview"),console.log(e.name,e),o.textContent=`${e.name}`,t.setAttribute("data-id",`${e.id}`),t.appendChild(o),document.querySelector(".project-container").appendChild(t)}renderToDoPreview(e){console.log("render start");const t=document.createElement("div");t.classList.add("todo-preview"),t.textContent=`${e.title}`,document.querySelector(`.project[data-id='${e.parentId}']`).insertAdjacentElement("beforeend",t)}renderAllToDo(e){this.clearToDoList(),e.forEach((e=>this.renderToDo(e)))}clearToDoList(){document.querySelector(".todos-list ul").innerHTML=""}todoShow(e){console.log(e),e.classList.toggle("hidden")}renderAllProjectPreview(e){e.projects.forEach((e=>this.renderProjectPreview(e)))}rednerAllToDoPreview(e){console.log(e.projects);for(let t=0;t<e.projects.length;t++)e.projects[t].todos.forEach((e=>this.renderToDoPreview(e)))}clearToDoPreview(){document.querySelectorAll(".todo-preview").forEach((e=>e.remove()))}toggleFinishedMark(e){e.querySelector(".title-element").classList.toggle("finished"),e.querySelector(".todo-full").classList.toggle("finished")}};console.log("START");let n=new e;const r=new t("Project Default"),i=new o("Gogogo","odin","today","low");i.parentId=1,i.setId(1),r.addToDo(i),r.setId(1),n.addProject(r),n.activeProject=n.projects[0];let l=new class{constructor(e){this.base=e,this.projects=e.projects,this.todos=this.projects.map((e=>e.todos)),this.baseResult}getToDos(e){this.todos=this.projects.map((e=>e.todos));const t=JSON.parse(e),s=JSON.parse(e);for(let e=0;e<t.length;e++)t[e]=t[e].map((e=>new o(e.title,e.description,e.date,e.priority)));for(let e=0;e<t.length;e++)t[e]=t[e].map(((t,o)=>Object.assign(t,s[e][o])));return t}getProjects(e){let o=JSON.parse(e);return console.log("--------------0-0-0-0-0-0-0-0"),console.log(o),o.map((e=>new t(e.name))).map(((e,t)=>Object.assign(e,o[t])))}getBase(t){const o=JSON.parse(t);let s=new e;return s=Object.assign(s,o),s}saveData(e){const t=JSON.stringify(e),o=JSON.stringify(e.projects),s=JSON.stringify(e.projects.map((e=>e.todos)));localStorage.setItem("base",t),localStorage.setItem("projects",o),localStorage.setItem("todos",s),console.log(t),console.log(o),console.log(s);const n=this.getBase(t),r=this.getProjects(o),i=this.getToDos(s);console.log(i),console.log(r),console.log(n);for(let e=0;e<r.length;e++)r[e].todos=i[e];return console.log("--------------------------------"),n.projects=r,n.activeProject=n.projects[0],console.log(n),n}loadData(){const e=this.getBase(localStorage.getItem("base")),t=this.getProjects(localStorage.getItem("projects")),o=this.getToDos(localStorage.getItem("todos"));console.log(o),console.log(t),console.log(e);for(let e=0;e<t.length;e++)t[e].todos=o[e];return console.log("--------------------------------"),e.projects=t,e.activeProject=e.projects[0],console.log(e),e}}(n),c=n.activeProject;n=localStorage.getItem("base")?l.loadData():n,c=n.activeProject,console.log(n),s.renderAllProjectPreview(n),s.rednerAllToDoPreview(n),console.log(c),s.renderAllToDo(c.todos);const d=document.querySelector(".new-todo-btn"),a=document.querySelector(".project-form"),p=document.querySelector("aside");d.addEventListener("click",(function(){s.renderForm(),document.querySelector("form").addEventListener("submit",u),localStorage.setItem("wtf","WHAT THE FUCK")}));const u=function(e){e.preventDefault();const{title:t,description:r,date:i,priority:d}=Object.fromEntries(new FormData(this)),a=new o(t,r,i,d);a.setId(c.todos.length+1),a.setParentId(c.id),c.addToDo(a),s.renderToDo(...c.todos.slice(-1)),console.log(c.todos.slice(-1)),l.saveData(n),s.renderToDoPreview(a)};document.querySelector("ul").addEventListener("click",(e=>{const t=e.target.closest(".delete");if(!t)return;const o=t.closest("li");c.removeToDo(+o.dataset.id),o.remove(),s.clearToDoPreview(),s.rednerAllToDoPreview(n),l.saveData(n)})),a.addEventListener("submit",(function(e){e.preventDefault();const o=this.querySelector("input").value;console.log(o),console.log("clickclack");const r=new t(o);r.setId(n.projects.length+1),n.addProject(r),this.querySelector("input").value="",console.log(n.projects),console.log(n),s.renderProjectPreview(r)})),p.addEventListener("click",(function(e){const t=e.target.closest(".project-preview");t&&t.textContent!==c.name&&(console.log("project selected"),console.log(t),c=n.projects.find((e=>e.name===t.textContent)),n.activeProject=c,console.log(c),s.renderAllToDo(c.todos),console.log(c.todos),console.log(n))})),document.querySelector("ul").addEventListener("click",(function(e){const t=e.target.closest(".show-full");t&&(console.log(t),t.textContent="+"===t.textContent?"-":"+",s.todoShow(t.closest(".todo").nextSibling))})),document.querySelector("ul").addEventListener("click",(function(e){const t=e.target.closest(".finish");if(!t)return;const o=t.closest("li");console.log(o.dataset.id),console.log(c.findToDoByID(+o.dataset.id)),c.findToDoByID(+o.dataset.id).markAsFinished(),s.toggleFinishedMark(o),l.saveData(n)})),console.log(localStorage.getItem("wtf"))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,