(()=>{"use strict";class e{constructor(){this.projects=[],this.activeProject}addProject(e){return this.projects.push(e),this.projects}removeProject(e){}}class t{constructor(e){this.name=e,this.todos=[],this.id}addToDo(e){this.todos.push(e)}removeToDo(e){const t=this.todos.findIndex((t=>t.id===e));this.todos.splice(t,1)}setId(e){this.id=e}findToDoByID(e){const t=this.todos.findIndex((t=>t.id===e));return this.todos[t]}}class o{constructor(e,t,o,i){this.title=e,this.description=t,this.date=o,this.priority=i,this.isFinished=!1,this.id,this.parentId}markAsFinished(){this.isFinished=!1===this.isFinished}setId(e){this.id=e}setParentId(e){this.parentId=e}}new class{constructor(){}};const i=new class{constructor(){}renderToDo=e=>{const t=document.querySelector("ul"),o=document.createElement("li"),i=document.createElement("div"),s=document.createElement("div"),r=document.createElement("div"),n=document.createElement("div"),d=document.createElement("div"),c=document.createElement("div"),a=document.createElement("div");a.classList.add("title-element"),i.classList.add("todo"),a.textContent=e.title,e.isFinished&&a.classList.add("finished"),i.classList.add(`${e.priority}`),n.textContent="delete",n.classList.add("delete"),d.classList.add("finish"),d.textContent="mark",c.classList.add("show-full"),c.textContent="+",r.classList.add("btns-container"),r.appendChild(c),r.appendChild(d),r.appendChild(n),i.appendChild(a),i.appendChild(r),o.appendChild(i),s.classList.add("todo-full"),s.classList.add("hidden"),s.classList.add(e.isFinished?"finished":"nope"),s.insertAdjacentHTML("afterbegin",`\n    \n    <p>\n      Description: ${e.description}\n    </p>\n    <p>Date: ${e.date}</p>`),o.appendChild(s),o.setAttribute("data-id",`${e.id}`),t.appendChild(o)};renderForm(){if(document.querySelector(".new-form-container"))return;const e=document.querySelector(".container"),t=document.createElement("div");t.classList.add("new-form-container");const o=document.createElement("form");o.setAttribute("action","submit"),o.insertAdjacentHTML("afterbegin",'<div class="field">\n<label for="title">Title: </label>\n<input type="text" name="title" id="title" required/>\n</div>\n<div class="field">\n<label for="description">Description: </label>\n<input type="text" name="description" id="description" required/>\n</div>\n<div class="field">\n<label for="date">Date: </label>\n<input type="date" name="date" id="date" required/>\n</div>\n<div class="radio-btn">\n<label for="low-prio">Low</label>\n<input type="radio" name="priority" id="low-prio" value="low" />\n<label for="med-prio">Medium</label>\n<input type="radio" name="priority" id="med-prio" value="med" />\n<label for="high-prio">High</label>\n<input type="radio" name="priority" id="high-prio" value="high" checked/>\n</div>\n<button type="submit">Submit</button>\n<div class="close-form"><div class="x">X</div></div>\n'),t.appendChild(o),e.insertAdjacentElement("afterbegin",t),document.querySelector(".close-form").addEventListener("click",(function(){t.remove()}))}renderProjectPreview(e){const t=document.createElement("div");t.classList.add("project");const o=document.createElement("div");o.classList.add("project-preview"),o.textContent=`${e.name}`,t.setAttribute("data-id",`${e.id}`),t.appendChild(o),document.querySelector(".project-container").appendChild(t)}renderToDoPreview(e){const t=document.createElement("div");t.classList.add("todo-preview"),t.textContent=`${e.title}`,e.isFinished&&t.classList.add("finished-preview"),document.querySelector(`.project[data-id='${e.parentId}']`).insertAdjacentElement("beforeend",t)}renderAllToDo(e){this.clearToDoList(),e.forEach((e=>this.renderToDo(e)))}clearToDoList(){document.querySelector(".todos-list ul").innerHTML=""}todoShow(e){e.classList.toggle("hidden")}renderAllProjectPreview(e){e.projects.forEach((e=>this.renderProjectPreview(e)))}rednerAllToDoPreview(e){for(let t=0;t<e.projects.length;t++)e.projects[t].todos.forEach((e=>this.renderToDoPreview(e)))}clearToDoPreview(){document.querySelectorAll(".todo-preview").forEach((e=>e.remove()))}toggleFinishedMark(e){e.querySelector(".title-element").classList.toggle("finished"),e.querySelector(".todo-full").classList.toggle("finished")}},s=function(e){e.preventDefault();const{title:t,description:s,date:c,priority:a}=Object.fromEntries(new FormData(this)),l=new o(t,s,c,a);l.setId(d.todos.length+1),l.setParentId(d.id),d.addToDo(l),i.renderToDo(...d.todos.slice(-1)),n.saveData(r),i.renderToDoPreview(l)};console.log("START");let r=new e;const n=new class{constructor(e){this.base=e,this.projects=e.projects,this.todos=this.projects.map((e=>e.todos)),this.baseResult}getToDos(e){this.todos=this.projects.map((e=>e.todos));const t=JSON.parse(e),i=JSON.parse(e);for(let e=0;e<t.length;e++)t[e]=t[e].map((e=>new o(e.title,e.description,e.date,e.priority)));for(let e=0;e<t.length;e++)t[e]=t[e].map(((t,o)=>Object.assign(t,i[e][o])));return t}getProjects(e){let o=JSON.parse(e);return o.map((e=>new t(e.name))).map(((e,t)=>Object.assign(e,o[t])))}getBase(t){const o=JSON.parse(t);let i=new e;return i=Object.assign(i,o),i}saveData(e){const t=JSON.stringify(e),o=JSON.stringify(e.projects),i=JSON.stringify(e.projects.map((e=>e.todos)));localStorage.setItem("base",t),localStorage.setItem("projects",o),localStorage.setItem("todos",i);const s=this.getBase(t),r=this.getProjects(o),n=this.getToDos(i);for(let e=0;e<r.length;e++)r[e].todos=n[e];return s.projects=r,s.activeProject=s.projects[0],s}loadData(){const e=this.getBase(localStorage.getItem("base")),t=this.getProjects(localStorage.getItem("projects")),o=this.getToDos(localStorage.getItem("todos"));for(let e=0;e<t.length;e++)t[e].todos=o[e];return e.projects=t,e.activeProject=e.projects[0],e}}(r);(()=>{const e=new t("Project Default"),i=new o("Gogogo","odin","today","low");i.parentId=1,i.setId(1),e.addToDo(i),e.setId(1),r.addProject(e),r.activeProject=r.projects[0]})();let d=r.activeProject;r=localStorage.getItem("base")?n.loadData():r,d=r.activeProject,i.renderAllProjectPreview(r),i.rednerAllToDoPreview(r),i.renderAllToDo(d.todos);const c=document.querySelector(".new-todo-btn"),a=document.querySelector(".project-form"),l=document.querySelector("aside");c.addEventListener("click",(function(){i.renderForm(),document.querySelector("form").addEventListener("submit",s)})),document.querySelector("ul").addEventListener("click",(function(e){const t=e.target.closest(".delete");if(!t)return;const o=t.closest("li");d.removeToDo(+o.dataset.id),o.remove(),i.clearToDoPreview(),i.rednerAllToDoPreview(r),n.saveData(r)})),a.addEventListener("submit",(function(e){e.preventDefault();const o=this.querySelector("input").value,s=new t(o);s.setId(r.projects.length+1),r.addProject(s),this.querySelector("input").value="",i.renderProjectPreview(s)})),l.addEventListener("click",(function(e){const t=e.target.closest(".project-preview");t&&t.textContent!==d.name&&(d=r.projects.find((e=>e.name===t.textContent)),r.activeProject=d,i.renderAllToDo(d.todos))})),document.querySelector("ul").addEventListener("click",(function(e){const t=e.target.closest(".show-full");t&&(t.textContent="+"===t.textContent?"-":"+",i.todoShow(t.closest(".todo").nextSibling))})),document.querySelector("ul").addEventListener("click",(function(e){const t=e.target.closest(".finish");if(!t)return;const o=t.closest("li");d.findToDoByID(+o.dataset.id).markAsFinished(),i.toggleFinishedMark(o),i.clearToDoPreview(),i.rednerAllToDoPreview(r),n.saveData(r)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,