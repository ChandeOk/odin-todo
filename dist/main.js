(()=>{"use strict";class e{constructor(e,t,i,o){this.title=e,this.description=t,this.date=i,this.priority=o,this.isFinished=!1,this.id}markAsFinished(){this.isFinished=!0}setId(e){this.id=e}}new class{constructor(){}};const t=new class{constructor(){}renderToDo=e=>{const t=document.querySelector("ul"),i=document.createElement("li"),o=document.createElement("div"),n=document.createElement("div"),d=document.createElement("div");o.classList.add("todo"),o.textContent=e.title,o.classList.add(`${e.priority}`),d.textContent="delete",d.classList.add("delete"),o.appendChild(d),i.appendChild(o),n.classList.add("todo-full"),n.insertAdjacentHTML("afterbegin",`\n    <p>Title: ${e.title}</p>\n    <p>\n      Description: ${e.description}\n    </p>\n    <p>Date: ${e.date}</p>`),i.appendChild(n),i.setAttribute("data-id",`${e.id}`),t.appendChild(i)};renderForm(){if(document.querySelector(".new-form-container"))return;const e=document.querySelector(".container"),t=document.createElement("div");t.classList.add("new-form-container");const i=document.createElement("form");i.setAttribute("action","submit"),i.insertAdjacentHTML("afterbegin",'<div class="field">\n<label for="title">Title: </label>\n<input type="text" name="title" id="title" />\n</div>\n<div class="field">\n<label for="description">Description: </label>\n<input type="text" name="description" id="description" />\n</div>\n<div class="field">\n<label for="date">Date: </label>\n<input type="date" name="date" id="date" />\n</div>\n<div class="radio-btn">\n<label for="low-prio">Low</label>\n<input type="radio" name="priority" id="low-prio" value="low" />\n<label for="med-prio">Medium</label>\n<input type="radio" name="priority" id="med-prio" value="med" />\n<label for="high-prio">High</label>\n<input type="radio" name="priority" id="high-prio" value="high" checked/>\n</div>\n<button type="submit">Submit</button>\n<div class="close-form">x</div>\n'),t.appendChild(i),e.insertAdjacentElement("afterbegin",t),document.querySelector(".close-form").addEventListener("click",(function(){t.remove()}))}};console.log("START");const i=new class{constructor(){this.projects=[]}addProject(e){return this.projects.push(e),this.projects}removeProject(e){}},o=new class{constructor(){this.todos=[]}addToDo(e){this.todos.push(e)}removeToDo(e){const t=this.todos.findIndex((t=>t.id===e));this.todos.splice(t,1),console.log(this.todos)}};i.addProject(o),document.querySelector(".new-todo-btn").addEventListener("click",(function(){t.renderForm(),document.querySelector("form").addEventListener("submit",n)}));const n=function(i){i.preventDefault();const{title:n,description:d,date:s,priority:r}=Object.fromEntries(new FormData(this)),c=new e(n,d,s,r);c.setId(o.todos.length+1),o.addToDo(c),t.renderToDo(...o.todos.slice(-1)),console.log(o.todos.slice(-1))};document.querySelector("ul").addEventListener("click",(e=>{const t=e.target.closest(".delete");if(!t)return;const i=t.closest("li");o.removeToDo(+i.dataset.id),i.remove()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,