(()=>{"use strict";class e{constructor(){this.projects=[],this.activeProject}addProject(e){return this.projects.push(e),this.projects}removeProject(e){}}class t{constructor(e){this.name=e,this.todos=[],this.id}addToDo(e){this.todos.push(e)}removeToDo(e){const t=this.todos.findIndex((t=>t.id===e));this.todos.splice(t,1)}setId(e){this.id=e}findToDoByID(e){const t=this.todos.findIndex((t=>t.id===e));return this.todos[t]}}class o{constructor(e,t,o,i){this.title=e,this.description=t,this.date=o,this.priority=i,this.isFinished=!1,this.id,this.parentId}markAsFinished(){this.isFinished=!1===this.isFinished}setId(e){this.id=e}setParentId(e){this.parentId=e}}new class{constructor(){}};const i=new class{constructor(){}renderToDo=e=>{const t=document.querySelector("ul"),o=document.createElement("li"),i=document.createElement("div"),s=document.createElement("div"),n=document.createElement("div"),r=document.createElement("div"),d=document.createElement("div"),c=document.createElement("div"),a=document.createElement("div");a.classList.add("title-element"),i.classList.add("todo"),a.textContent=e.title,e.isFinished&&a.classList.add("finished"),i.classList.add(`${e.priority}`),r.textContent="delete",r.classList.add("delete"),d.classList.add("finish"),d.textContent="mark",c.classList.add("show-full"),c.textContent="+",n.classList.add("btns-container"),n.appendChild(c),n.appendChild(d),n.appendChild(r),i.appendChild(a),i.appendChild(n),o.appendChild(i),s.classList.add("todo-full"),s.classList.add("hidden"),s.classList.add(e.isFinished?"finished":"nope"),s.insertAdjacentHTML("afterbegin",`\n    \n    <p>\n      Description: ${e.description}\n    </p>\n    <p>Date: ${e.date}</p>`),o.appendChild(s),o.setAttribute("data-id",`${e.id}`),t.appendChild(o)};renderForm(){if(document.querySelector(".new-form-container"))return;const e=document.querySelector(".container"),t=document.createElement("div");t.classList.add("new-form-container");const o=document.createElement("form");o.setAttribute("action","submit"),o.insertAdjacentHTML("afterbegin",'<div class="field">\n<label for="title">Title: </label>\n<input type="text" name="title" id="title" required/>\n</div>\n<div class="field">\n<label for="description">Description: </label>\n<input type="text" name="description" id="description" required/>\n</div>\n<div class="field">\n<label for="date">Date: </label>\n<input type="date" name="date" id="date" required/>\n</div>\n<div class="radio-btn">\n<label for="low-prio">Low</label>\n<input type="radio" name="priority" id="low-prio" value="low" />\n<label for="med-prio">Medium</label>\n<input type="radio" name="priority" id="med-prio" value="med" />\n<label for="high-prio">High</label>\n<input type="radio" name="priority" id="high-prio" value="high" checked/>\n</div>\n<button type="submit">Submit</button>\n<div class="close-form"><div class="x">X</div></div>\n'),t.appendChild(o),e.insertAdjacentElement("afterbegin",t),document.querySelector(".close-form").addEventListener("click",(function(){t.remove()}))}renderProjectPreview(e){const t=document.createElement("div");t.classList.add("project");const o=document.createElement("div");o.classList.add("project-preview"),o.textContent=`${e.name}`,t.setAttribute("data-id",`${e.id}`),t.appendChild(o),document.querySelector(".project-container").appendChild(t)}renderToDoPreview(e){const t=document.createElement("div");t.classList.add("todo-preview"),t.textContent=`${e.title}`,document.querySelector(`.project[data-id='${e.parentId}']`).insertAdjacentElement("beforeend",t)}renderAllToDo(e){this.clearToDoList(),e.forEach((e=>this.renderToDo(e)))}clearToDoList(){document.querySelector(".todos-list ul").innerHTML=""}todoShow(e){e.classList.toggle("hidden")}renderAllProjectPreview(e){e.projects.forEach((e=>this.renderProjectPreview(e)))}rednerAllToDoPreview(e){for(let t=0;t<e.projects.length;t++)e.projects[t].todos.forEach((e=>this.renderToDoPreview(e)))}clearToDoPreview(){document.querySelectorAll(".todo-preview").forEach((e=>e.remove()))}toggleFinishedMark(e){e.querySelector(".title-element").classList.toggle("finished"),e.querySelector(".todo-full").classList.toggle("finished")}},s=function(e){e.preventDefault();const{title:t,description:s,date:c,priority:a}=Object.fromEntries(new FormData(this)),l=new o(t,s,c,a);l.setId(d.todos.length+1),l.setParentId(d.id),d.addToDo(l),i.renderToDo(...d.todos.slice(-1)),r.saveData(n),i.renderToDoPreview(l)};console.log("START");let n=new e;const r=new class{constructor(e){this.base=e,this.projects=e.projects,this.todos=this.projects.map((e=>e.todos)),this.baseResult}getToDos(e){this.todos=this.projects.map((e=>e.todos));const t=JSON.parse(e),i=JSON.parse(e);for(let e=0;e<t.length;e++)t[e]=t[e].map((e=>new o(e.title,e.description,e.date,e.priority)));for(let e=0;e<t.length;e++)t[e]=t[e].map(((t,o)=>Object.assign(t,i[e][o])));return t}getProjects(e){let o=JSON.parse(e);return o.map((e=>new t(e.name))).map(((e,t)=>Object.assign(e,o[t])))}getBase(t){const o=JSON.parse(t);let i=new e;return i=Object.assign(i,o),i}saveData(e){const t=JSON.stringify(e),o=JSON.stringify(e.projects),i=JSON.stringify(e.projects.map((e=>e.todos)));localStorage.setItem("base",t),localStorage.setItem("projects",o),localStorage.setItem("todos",i);const s=this.getBase(t),n=this.getProjects(o),r=this.getToDos(i);for(let e=0;e<n.length;e++)n[e].todos=r[e];return s.projects=n,s.activeProject=s.projects[0],s}loadData(){const e=this.getBase(localStorage.getItem("base")),t=this.getProjects(localStorage.getItem("projects")),o=this.getToDos(localStorage.getItem("todos"));for(let e=0;e<t.length;e++)t[e].todos=o[e];return e.projects=t,e.activeProject=e.projects[0],e}}(n);(()=>{const e=new t("Project Default"),i=new o("Gogogo","odin","today","low");i.parentId=1,i.setId(1),e.addToDo(i),e.setId(1),n.addProject(e),n.activeProject=n.projects[0]})();let d=n.activeProject;n=localStorage.getItem("base")?r.loadData():n,d=n.activeProject,i.renderAllProjectPreview(n),i.rednerAllToDoPreview(n),i.renderAllToDo(d.todos);const c=document.querySelector(".new-todo-btn"),a=document.querySelector(".project-form"),l=document.querySelector("aside");c.addEventListener("click",(function(){i.renderForm(),document.querySelector("form").addEventListener("submit",s)})),document.querySelector("ul").addEventListener("click",(function(e){const t=e.target.closest(".delete");if(!t)return;const o=t.closest("li");d.removeToDo(+o.dataset.id),o.remove(),i.clearToDoPreview(),i.rednerAllToDoPreview(n),r.saveData(n)})),a.addEventListener("submit",(function(e){e.preventDefault();const o=this.querySelector("input").value,s=new t(o);s.setId(n.projects.length+1),n.addProject(s),this.querySelector("input").value="",i.renderProjectPreview(s)})),l.addEventListener("click",(function(e){const t=e.target.closest(".project-preview");t&&t.textContent!==d.name&&(d=n.projects.find((e=>e.name===t.textContent)),n.activeProject=d,i.renderAllToDo(d.todos))})),document.querySelector("ul").addEventListener("click",(function(e){const t=e.target.closest(".show-full");t&&(t.textContent="+"===t.textContent?"-":"+",i.todoShow(t.closest(".todo").nextSibling))})),document.querySelector("ul").addEventListener("click",(function(e){const t=e.target.closest(".finish");if(!t)return;const o=t.closest("li");d.findToDoByID(+o.dataset.id).markAsFinished(),i.toggleFinishedMark(o),r.saveData(n)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFFBQVEsTUFDdkNsSCxFQUFjZ0IsY0FBY04sRUFBSzBHLFFBQVE1RyxJQUFJaUIsaUJBQzdDLHFCQUF1QmYsR0FDdkJxRSxFQUFPQyxTQUFTaEIsTyIsInNvdXJjZXMiOlsid2VicGFjazovL29kaW4tdG9kby8uL3NyYy9EYXRhLmpzIiwid2VicGFjazovL29kaW4tdG9kby8uL3NyYy9Qcm9qZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby8uL3NyYy9Ub0RvLmpzIiwid2VicGFjazovL29kaW4tdG9kby8uL3NyYy9IYW5kbGVyLmpzIiwid2VicGFjazovL29kaW4tdG9kby8uL3NyYy9ET00uanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLy4vc3JjL01hcmtkb3duLmpzIiwid2VicGFjazovL29kaW4tdG9kby8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8vLi9zcmMvTG9jYWxTdG9yYWdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIERhdGEge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnByb2plY3RzID0gW107XG4gICAgdGhpcy5hY3RpdmVQcm9qZWN0O1xuICB9XG5cbiAgYWRkUHJvamVjdChwcm9qZWN0KSB7XG4gICAgdGhpcy5wcm9qZWN0cy5wdXNoKHByb2plY3QpO1xuICAgIHJldHVybiB0aGlzLnByb2plY3RzO1xuICB9XG4gIHJlbW92ZVByb2plY3QocHJvamVjdCkge31cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2plY3Qge1xuICBjb25zdHJ1Y3RvcihuYW1lKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnRvZG9zID0gW107XG4gICAgdGhpcy5pZDtcbiAgfVxuXG4gIGFkZFRvRG8odG9kbykge1xuICAgIHRoaXMudG9kb3MucHVzaCh0b2RvKTtcbiAgfVxuICByZW1vdmVUb0RvKGlkKSB7XG4gICAgY29uc3QgdG9kbyA9IHRoaXMudG9kb3MuZmluZEluZGV4KChlbGVtZW50KSA9PiBlbGVtZW50LmlkID09PSBpZCk7XG4gICAgdGhpcy50b2Rvcy5zcGxpY2UodG9kbywgMSk7XG4gIH1cbiAgc2V0SWQoaWQpIHtcbiAgICB0aGlzLmlkID0gaWQ7XG4gIH1cbiAgZmluZFRvRG9CeUlEKGlkKSB7XG4gICAgY29uc3QgdG9kb0lkID0gdGhpcy50b2Rvcy5maW5kSW5kZXgoKGVsZW1lbnQpID0+IGVsZW1lbnQuaWQgPT09IGlkKTtcbiAgICByZXR1cm4gdGhpcy50b2Rvc1t0b2RvSWRdO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBUb0RvIHtcbiAgY29uc3RydWN0b3IodGl0bGUsIGRlc2NyaXB0aW9uLCBkYXRlLCBwcmlvcml0eSkge1xuICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgdGhpcy5kYXRlID0gZGF0ZTtcbiAgICB0aGlzLnByaW9yaXR5ID0gcHJpb3JpdHk7XG4gICAgdGhpcy5pc0ZpbmlzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5pZDtcbiAgICB0aGlzLnBhcmVudElkO1xuICB9XG5cbiAgbWFya0FzRmluaXNoZWQoKSB7XG4gICAgdGhpcy5pc0ZpbmlzaGVkID0gdGhpcy5pc0ZpbmlzaGVkID09PSBmYWxzZSA/IHRydWUgOiBmYWxzZTtcbiAgfVxuXG4gIHNldElkKGlkKSB7XG4gICAgdGhpcy5pZCA9IGlkO1xuICB9XG4gIHNldFBhcmVudElkKHBhcmVudElkKSB7XG4gICAgdGhpcy5wYXJlbnRJZCA9IHBhcmVudElkO1xuICB9XG59XG4iLCJjbGFzcyBIYW5kbGVyIHtcbiAgY29uc3RydWN0b3IoKSB7fVxufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgSGFuZGxlcigpO1xuIiwiaW1wb3J0IEhhbmRsZXIgZnJvbSAnLi9IYW5kbGVyJztcbmltcG9ydCB7IGZvcm1NYXJrZG93biB9IGZyb20gJy4vTWFya2Rvd24nO1xuXG5jbGFzcyBET00ge1xuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgcmVuZGVyVG9EbyA9ICh0b2RvKSA9PiB7XG4gICAgY29uc3QgdWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCd1bCcpO1xuICAgIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICBjb25zdCB0b2RvRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb25zdCB0b2RvRnVsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNvbnN0IGJ0bnNDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb25zdCBkZWxldGVCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb25zdCBmaW5pc2hlZEJ1dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29uc3Qgc2hvd0Z1bGxCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRpdGxlLmNsYXNzTGlzdC5hZGQoJ3RpdGxlLWVsZW1lbnQnKTtcbiAgICB0b2RvRWwuY2xhc3NMaXN0LmFkZCgndG9kbycpO1xuICAgIHRpdGxlLnRleHRDb250ZW50ID0gdG9kby50aXRsZTtcbiAgICBpZiAodG9kby5pc0ZpbmlzaGVkKSB0aXRsZS5jbGFzc0xpc3QuYWRkKCdmaW5pc2hlZCcpO1xuICAgIHRvZG9FbC5jbGFzc0xpc3QuYWRkKGAke3RvZG8ucHJpb3JpdHl9YCk7XG4gICAgZGVsZXRlQnRuLnRleHRDb250ZW50ID0gJ2RlbGV0ZSc7XG4gICAgZGVsZXRlQnRuLmNsYXNzTGlzdC5hZGQoJ2RlbGV0ZScpO1xuICAgIGZpbmlzaGVkQnV0b24uY2xhc3NMaXN0LmFkZCgnZmluaXNoJyk7XG4gICAgZmluaXNoZWRCdXRvbi50ZXh0Q29udGVudCA9ICdtYXJrJztcbiAgICBzaG93RnVsbEJ0bi5jbGFzc0xpc3QuYWRkKCdzaG93LWZ1bGwnKTtcbiAgICBzaG93RnVsbEJ0bi50ZXh0Q29udGVudCA9ICcrJztcbiAgICBidG5zQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2J0bnMtY29udGFpbmVyJyk7XG4gICAgYnRuc0NvbnRhaW5lci5hcHBlbmRDaGlsZChzaG93RnVsbEJ0bik7XG4gICAgYnRuc0NvbnRhaW5lci5hcHBlbmRDaGlsZChmaW5pc2hlZEJ1dG9uKTtcbiAgICBidG5zQ29udGFpbmVyLmFwcGVuZENoaWxkKGRlbGV0ZUJ0bik7XG4gICAgdG9kb0VsLmFwcGVuZENoaWxkKHRpdGxlKTtcbiAgICB0b2RvRWwuYXBwZW5kQ2hpbGQoYnRuc0NvbnRhaW5lcik7XG4gICAgbGkuYXBwZW5kQ2hpbGQodG9kb0VsKTtcblxuICAgIHRvZG9GdWxsLmNsYXNzTGlzdC5hZGQoJ3RvZG8tZnVsbCcpO1xuICAgIHRvZG9GdWxsLmNsYXNzTGlzdC5hZGQoYGhpZGRlbmApO1xuICAgIHRvZG9GdWxsLmNsYXNzTGlzdC5hZGQoYCR7dG9kby5pc0ZpbmlzaGVkID8gJ2ZpbmlzaGVkJyA6ICdub3BlJ31gKTtcbiAgICB0b2RvRnVsbC5pbnNlcnRBZGphY2VudEhUTUwoXG4gICAgICAnYWZ0ZXJiZWdpbicsXG4gICAgICBgXG4gICAgXG4gICAgPHA+XG4gICAgICBEZXNjcmlwdGlvbjogJHt0b2RvLmRlc2NyaXB0aW9ufVxuICAgIDwvcD5cbiAgICA8cD5EYXRlOiAke3RvZG8uZGF0ZX08L3A+YFxuICAgICk7XG4gICAgbGkuYXBwZW5kQ2hpbGQodG9kb0Z1bGwpO1xuICAgIGxpLnNldEF0dHJpYnV0ZSgnZGF0YS1pZCcsIGAke3RvZG8uaWR9YCk7XG4gICAgdWwuYXBwZW5kQ2hpbGQobGkpO1xuICB9O1xuXG4gIHJlbmRlckZvcm0oKSB7XG4gICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uZXctZm9ybS1jb250YWluZXInKSkgcmV0dXJuO1xuXG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRhaW5lcicpO1xuICAgIGNvbnN0IGZvcm1Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBmb3JtQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ25ldy1mb3JtLWNvbnRhaW5lcicpO1xuXG4gICAgY29uc3QgZm9ybUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9ybScpO1xuICAgIGZvcm1FbC5zZXRBdHRyaWJ1dGUoJ2FjdGlvbicsICdzdWJtaXQnKTtcbiAgICBmb3JtRWwuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmJlZ2luJywgZm9ybU1hcmtkb3duKTtcbiAgICBmb3JtQ29udGFpbmVyLmFwcGVuZENoaWxkKGZvcm1FbCk7XG4gICAgY29udGFpbmVyLmluc2VydEFkamFjZW50RWxlbWVudCgnYWZ0ZXJiZWdpbicsIGZvcm1Db250YWluZXIpO1xuXG4gICAgZG9jdW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKCcuY2xvc2UtZm9ybScpXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvcm1Db250YWluZXIucmVtb3ZlKCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIHJlbmRlclByb2plY3RQcmV2aWV3KHByb2plY3QpIHtcbiAgICBjb25zdCBwcm9qZWN0RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBwcm9qZWN0RWwuY2xhc3NMaXN0LmFkZCgncHJvamVjdCcpO1xuICAgIGNvbnN0IHByb2plY3RQcmV2aWV3ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgcHJvamVjdFByZXZpZXcuY2xhc3NMaXN0LmFkZCgncHJvamVjdC1wcmV2aWV3Jyk7XG5cbiAgICBwcm9qZWN0UHJldmlldy50ZXh0Q29udGVudCA9IGAke3Byb2plY3QubmFtZX1gO1xuICAgIHByb2plY3RFbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnLCBgJHtwcm9qZWN0LmlkfWApO1xuXG4gICAgcHJvamVjdEVsLmFwcGVuZENoaWxkKHByb2plY3RQcmV2aWV3KTtcblxuICAgIGNvbnN0IHBhcmVudEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdC1jb250YWluZXInKTtcbiAgICBwYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKHByb2plY3RFbCk7XG4gIH1cblxuICByZW5kZXJUb0RvUHJldmlldyh0b2RvKSB7XG4gICAgY29uc3QgdG9kb1ByZXZpZXdFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRvZG9QcmV2aWV3RWwuY2xhc3NMaXN0LmFkZCgndG9kby1wcmV2aWV3Jyk7XG4gICAgdG9kb1ByZXZpZXdFbC50ZXh0Q29udGVudCA9IGAke3RvZG8udGl0bGV9YDtcbiAgICBjb25zdCBwcm9qZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgIGAucHJvamVjdFtkYXRhLWlkPScke3RvZG8ucGFyZW50SWR9J11gXG4gICAgKTtcblxuICAgIHByb2plY3QuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdiZWZvcmVlbmQnLCB0b2RvUHJldmlld0VsKTtcbiAgfVxuXG4gIHJlbmRlckFsbFRvRG8odG9kb3MpIHtcbiAgICB0aGlzLmNsZWFyVG9Eb0xpc3QoKTtcbiAgICB0b2Rvcy5mb3JFYWNoKCh0b2RvKSA9PiB0aGlzLnJlbmRlclRvRG8odG9kbykpO1xuICB9XG5cbiAgY2xlYXJUb0RvTGlzdCgpIHtcbiAgICBjb25zdCB0b0RvTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b2Rvcy1saXN0IHVsJyk7XG4gICAgdG9Eb0xpc3QuaW5uZXJIVE1MID0gJyc7XG4gIH1cblxuICB0b2RvU2hvdyh0b2RvKSB7XG4gICAgdG9kby5jbGFzc0xpc3QudG9nZ2xlKCdoaWRkZW4nKTtcbiAgfVxuXG4gIHJlbmRlckFsbFByb2plY3RQcmV2aWV3KGJhc2UpIHtcbiAgICBiYXNlLnByb2plY3RzLmZvckVhY2goKHByb2plY3QpID0+IHRoaXMucmVuZGVyUHJvamVjdFByZXZpZXcocHJvamVjdCkpO1xuICB9XG5cbiAgcmVkbmVyQWxsVG9Eb1ByZXZpZXcoYmFzZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmFzZS5wcm9qZWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgYmFzZS5wcm9qZWN0c1tpXS50b2Rvcy5mb3JFYWNoKCh0b2RvKSA9PiB0aGlzLnJlbmRlclRvRG9QcmV2aWV3KHRvZG8pKTtcbiAgICB9XG4gIH1cblxuICBjbGVhclRvRG9QcmV2aWV3KCkge1xuICAgIGNvbnN0IHRvRG9QcmV2aWV3cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50b2RvLXByZXZpZXcnKTtcbiAgICB0b0RvUHJldmlld3MuZm9yRWFjaCgocHJldmlldykgPT4gcHJldmlldy5yZW1vdmUoKSk7XG4gIH1cblxuICB0b2dnbGVGaW5pc2hlZE1hcmsodG9kbykge1xuICAgIHRvZG8ucXVlcnlTZWxlY3RvcignLnRpdGxlLWVsZW1lbnQnKS5jbGFzc0xpc3QudG9nZ2xlKCdmaW5pc2hlZCcpO1xuICAgIHRvZG8ucXVlcnlTZWxlY3RvcignLnRvZG8tZnVsbCcpLmNsYXNzTGlzdC50b2dnbGUoJ2ZpbmlzaGVkJyk7XG4gICAgLy8gdG9kby5xdWVyeVNlbGVjdG9yKCcuYnRucy1jb250YWluZXInKS5jbGFzc0xpc3QuYWRkKCdub3BlJyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbmV3IERPTSgpO1xuIiwiY29uc3QgZm9ybU1hcmtkb3duID0gYDxkaXYgY2xhc3M9XCJmaWVsZFwiPlxuPGxhYmVsIGZvcj1cInRpdGxlXCI+VGl0bGU6IDwvbGFiZWw+XG48aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidGl0bGVcIiBpZD1cInRpdGxlXCIgcmVxdWlyZWQvPlxuPC9kaXY+XG48ZGl2IGNsYXNzPVwiZmllbGRcIj5cbjxsYWJlbCBmb3I9XCJkZXNjcmlwdGlvblwiPkRlc2NyaXB0aW9uOiA8L2xhYmVsPlxuPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImRlc2NyaXB0aW9uXCIgaWQ9XCJkZXNjcmlwdGlvblwiIHJlcXVpcmVkLz5cbjwvZGl2PlxuPGRpdiBjbGFzcz1cImZpZWxkXCI+XG48bGFiZWwgZm9yPVwiZGF0ZVwiPkRhdGU6IDwvbGFiZWw+XG48aW5wdXQgdHlwZT1cImRhdGVcIiBuYW1lPVwiZGF0ZVwiIGlkPVwiZGF0ZVwiIHJlcXVpcmVkLz5cbjwvZGl2PlxuPGRpdiBjbGFzcz1cInJhZGlvLWJ0blwiPlxuPGxhYmVsIGZvcj1cImxvdy1wcmlvXCI+TG93PC9sYWJlbD5cbjxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwicHJpb3JpdHlcIiBpZD1cImxvdy1wcmlvXCIgdmFsdWU9XCJsb3dcIiAvPlxuPGxhYmVsIGZvcj1cIm1lZC1wcmlvXCI+TWVkaXVtPC9sYWJlbD5cbjxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwicHJpb3JpdHlcIiBpZD1cIm1lZC1wcmlvXCIgdmFsdWU9XCJtZWRcIiAvPlxuPGxhYmVsIGZvcj1cImhpZ2gtcHJpb1wiPkhpZ2g8L2xhYmVsPlxuPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJwcmlvcml0eVwiIGlkPVwiaGlnaC1wcmlvXCIgdmFsdWU9XCJoaWdoXCIgY2hlY2tlZC8+XG48L2Rpdj5cbjxidXR0b24gdHlwZT1cInN1Ym1pdFwiPlN1Ym1pdDwvYnV0dG9uPlxuPGRpdiBjbGFzcz1cImNsb3NlLWZvcm1cIj48ZGl2IGNsYXNzPVwieFwiPlg8L2Rpdj48L2Rpdj5cbmA7XG5cbmV4cG9ydCB7IGZvcm1NYXJrZG93biB9O1xuIiwiaW1wb3J0IERhdGEgZnJvbSAnLi9EYXRhLmpzJztcbmltcG9ydCBQcm9qZWN0IGZyb20gJy4vUHJvamVjdC5qcyc7XG5pbXBvcnQgVG9EbyBmcm9tICcuL1RvRG8uanMnO1xuaW1wb3J0IERPTSBmcm9tICcuL0RPTS5qcyc7XG5pbXBvcnQgT2JqZWN0SGVscGVyIGZyb20gJy4vTG9jYWxTdG9yYWdlLmpzJztcblxuY29uc3QgaW5pdERlZmF1bHRQcm9qZWN0ID0gKCkgPT4ge1xuICBjb25zdCBwcm9qZWN0MSA9IG5ldyBQcm9qZWN0KCdQcm9qZWN0IERlZmF1bHQnKTtcbiAgY29uc3QgdG9kbzEgPSBuZXcgVG9EbygnR29nb2dvJywgJ29kaW4nLCAndG9kYXknLCAnbG93Jyk7XG5cbiAgdG9kbzEucGFyZW50SWQgPSAxO1xuICB0b2RvMS5zZXRJZCgxKTtcbiAgcHJvamVjdDEuYWRkVG9Ebyh0b2RvMSk7XG4gIHByb2plY3QxLnNldElkKDEpO1xuICBiYXNlLmFkZFByb2plY3QocHJvamVjdDEpO1xuICBiYXNlLmFjdGl2ZVByb2plY3QgPSBiYXNlLnByb2plY3RzWzBdO1xufTtcbmNvbnN0IGluaXRSZW5kZXIgPSAoKSA9PiB7XG4gIERPTS5yZW5kZXJBbGxQcm9qZWN0UHJldmlldyhiYXNlKTtcbiAgRE9NLnJlZG5lckFsbFRvRG9QcmV2aWV3KGJhc2UpO1xuICBET00ucmVuZGVyQWxsVG9EbyhhY3RpdmVQcm9qZWN0LnRvZG9zKTtcbn07XG5jb25zdCBoYW5kbGVyU3VibWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGNvbnN0IHsgdGl0bGUsIGRlc2NyaXB0aW9uLCBkYXRlLCBwcmlvcml0eSB9ID0gT2JqZWN0LmZyb21FbnRyaWVzKFxuICAgIG5ldyBGb3JtRGF0YSh0aGlzKVxuICApO1xuICBjb25zdCB0b2RvID0gbmV3IFRvRG8odGl0bGUsIGRlc2NyaXB0aW9uLCBkYXRlLCBwcmlvcml0eSk7XG4gIHRvZG8uc2V0SWQoYWN0aXZlUHJvamVjdC50b2Rvcy5sZW5ndGggKyAxKTtcbiAgdG9kby5zZXRQYXJlbnRJZChhY3RpdmVQcm9qZWN0LmlkKTtcbiAgYWN0aXZlUHJvamVjdC5hZGRUb0RvKHRvZG8pO1xuICBET00ucmVuZGVyVG9EbyguLi5hY3RpdmVQcm9qZWN0LnRvZG9zLnNsaWNlKC0xKSk7XG4gIGhlbHBlci5zYXZlRGF0YShiYXNlKTtcbiAgRE9NLnJlbmRlclRvRG9QcmV2aWV3KHRvZG8pO1xufTtcbmNvbnN0IGhhbmRsZXJEZWxldGUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgY29uc3QgYnRuQ2xvc2UgPSBldmVudC50YXJnZXQuY2xvc2VzdCgnLmRlbGV0ZScpO1xuICBpZiAoIWJ0bkNsb3NlKSByZXR1cm47XG4gIGNvbnN0IHNlbGVjdGVkVG9EbyA9IGJ0bkNsb3NlLmNsb3Nlc3QoJ2xpJyk7XG4gIGFjdGl2ZVByb2plY3QucmVtb3ZlVG9Ebygrc2VsZWN0ZWRUb0RvLmRhdGFzZXQuaWQpO1xuICBzZWxlY3RlZFRvRG8ucmVtb3ZlKCk7XG4gIERPTS5jbGVhclRvRG9QcmV2aWV3KCk7XG4gIERPTS5yZWRuZXJBbGxUb0RvUHJldmlldyhiYXNlKTtcbiAgaGVscGVyLnNhdmVEYXRhKGJhc2UpO1xufTtcbmNvbnN0IGhhbmRsZXJOZXdQcm9qZWN0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGNvbnN0IHByb2plY3ROYW1lID0gdGhpcy5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpLnZhbHVlO1xuICBjb25zdCBuZXdQcm9qZWN0ID0gbmV3IFByb2plY3QocHJvamVjdE5hbWUpO1xuICBuZXdQcm9qZWN0LnNldElkKGJhc2UucHJvamVjdHMubGVuZ3RoICsgMSk7XG4gIGJhc2UuYWRkUHJvamVjdChuZXdQcm9qZWN0KTtcbiAgdGhpcy5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpLnZhbHVlID0gJyc7XG5cbiAgRE9NLnJlbmRlclByb2plY3RQcmV2aWV3KG5ld1Byb2plY3QpO1xufTtcbmNvbnN0IGhhbmRsZXJDaGFuZ2VBY3RpdmVQb3JqZWN0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGNvbnN0IGFjdGl2ZVByb2plY3RTZWxlY3QgPSBldmVudC50YXJnZXQuY2xvc2VzdCgnLnByb2plY3QtcHJldmlldycpO1xuICBpZiAoIWFjdGl2ZVByb2plY3RTZWxlY3QpIHJldHVybjtcbiAgaWYgKGFjdGl2ZVByb2plY3RTZWxlY3QudGV4dENvbnRlbnQgPT09IGFjdGl2ZVByb2plY3QubmFtZSkgcmV0dXJuO1xuICBhY3RpdmVQcm9qZWN0ID0gYmFzZS5wcm9qZWN0cy5maW5kKFxuICAgIChwcm9qZWN0KSA9PiBwcm9qZWN0Lm5hbWUgPT09IGFjdGl2ZVByb2plY3RTZWxlY3QudGV4dENvbnRlbnRcbiAgKTtcbiAgYmFzZS5hY3RpdmVQcm9qZWN0ID0gYWN0aXZlUHJvamVjdDtcblxuICBET00ucmVuZGVyQWxsVG9EbyhhY3RpdmVQcm9qZWN0LnRvZG9zKTtcbn07XG5jb25zdCBoYW5kbGVyU2hvd0Z1bGxJbmZvID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGNvbnN0IHRvZG9TaG93QnRuID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJy5zaG93LWZ1bGwnKTtcbiAgaWYgKCF0b2RvU2hvd0J0bikgcmV0dXJuO1xuICB0b2RvU2hvd0J0bi50ZXh0Q29udGVudCA9IHRvZG9TaG93QnRuLnRleHRDb250ZW50ID09PSAnKycgPyAnLScgOiAnKyc7XG4gIERPTS50b2RvU2hvdyh0b2RvU2hvd0J0bi5jbG9zZXN0KCcudG9kbycpLm5leHRTaWJsaW5nKTtcbn07XG5jb25zdCBoYW5kbGVyTWFya0FzRmluaXNoZWQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgY29uc3QgYnRuTWFya0FzRmluaXNoZWQgPSBldmVudC50YXJnZXQuY2xvc2VzdCgnLmZpbmlzaCcpO1xuICBpZiAoIWJ0bk1hcmtBc0ZpbmlzaGVkKSByZXR1cm47XG4gIGNvbnN0IHRvZG8gPSBidG5NYXJrQXNGaW5pc2hlZC5jbG9zZXN0KCdsaScpO1xuICBhY3RpdmVQcm9qZWN0LmZpbmRUb0RvQnlJRCgrdG9kby5kYXRhc2V0LmlkKS5tYXJrQXNGaW5pc2hlZCgpO1xuICBET00udG9nZ2xlRmluaXNoZWRNYXJrKHRvZG8pO1xuICBoZWxwZXIuc2F2ZURhdGEoYmFzZSk7XG59O1xuXG5jb25zb2xlLmxvZygnU1RBUlQnKTtcbmxldCBiYXNlID0gbmV3IERhdGEoKTtcbmNvbnN0IGhlbHBlciA9IG5ldyBPYmplY3RIZWxwZXIoYmFzZSk7XG5cbmluaXREZWZhdWx0UHJvamVjdCgpO1xuXG5sZXQgYWN0aXZlUHJvamVjdCA9IGJhc2UuYWN0aXZlUHJvamVjdDtcbmJhc2UgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYmFzZScpID8gaGVscGVyLmxvYWREYXRhKCkgOiBiYXNlO1xuYWN0aXZlUHJvamVjdCA9IGJhc2UuYWN0aXZlUHJvamVjdDtcblxuaW5pdFJlbmRlcigpO1xuXG5jb25zdCBidG5OZXcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmV3LXRvZG8tYnRuJyk7XG5jb25zdCBmb3JtTmV3UHJvamVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0LWZvcm0nKTtcbmNvbnN0IGFzaWRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYXNpZGUnKTtcblxuLy9FVkVOVCBMSVNURU5FUlNcblxuYnRuTmV3LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICBET00ucmVuZGVyRm9ybSgpO1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdmb3JtJykuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgaGFuZGxlclN1Ym1pdCk7XG59KTtcblxuZG9jdW1lbnQucXVlcnlTZWxlY3RvcigndWwnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZXJEZWxldGUpO1xuXG5mb3JtTmV3UHJvamVjdC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBoYW5kbGVyTmV3UHJvamVjdCk7XG5cbmFzaWRlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlckNoYW5nZUFjdGl2ZVBvcmplY3QpO1xuXG5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCd1bCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlclNob3dGdWxsSW5mbyk7XG5cbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3VsJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVyTWFya0FzRmluaXNoZWQpO1xuIiwiaW1wb3J0IERhdGEgZnJvbSAnLi9EYXRhJztcbmltcG9ydCBQcm9qZWN0IGZyb20gJy4vUHJvamVjdCc7XG5pbXBvcnQgVG9EbyBmcm9tICcuL1RvRG8nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPYmplY3RIZWxwZXIge1xuICBjb25zdHJ1Y3RvcihiYXNlKSB7XG4gICAgdGhpcy5iYXNlID0gYmFzZTtcbiAgICB0aGlzLnByb2plY3RzID0gYmFzZS5wcm9qZWN0cztcbiAgICB0aGlzLnRvZG9zID0gdGhpcy5wcm9qZWN0cy5tYXAoKHByb2plY3QpID0+IHByb2plY3QudG9kb3MpO1xuICAgIHRoaXMuYmFzZVJlc3VsdDtcbiAgfVxuXG4gIGdldFRvRG9zKHRvZG9zSlNPTikge1xuICAgIHRoaXMudG9kb3MgPSB0aGlzLnByb2plY3RzLm1hcCgocHJvamVjdCkgPT4gcHJvamVjdC50b2Rvcyk7XG4gICAgY29uc3QgcmVzdWx0ID0gSlNPTi5wYXJzZSh0b2Rvc0pTT04pO1xuICAgIGNvbnN0IHJlc3VsdDIgPSBKU09OLnBhcnNlKHRvZG9zSlNPTik7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdC5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gcmVzdWx0W2ldLm1hcChcbiAgICAgICAgKG9iaikgPT4gbmV3IFRvRG8ob2JqLnRpdGxlLCBvYmouZGVzY3JpcHRpb24sIG9iai5kYXRlLCBvYmoucHJpb3JpdHkpXG4gICAgICApO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdC5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gcmVzdWx0W2ldLm1hcCgob2JqLCBpbmRleCkgPT5cbiAgICAgICAgT2JqZWN0LmFzc2lnbihvYmosIHJlc3VsdDJbaV1baW5kZXhdKVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGdldFByb2plY3RzKHByb2plY3RzSlNPTikge1xuICAgIGxldCByZXN1bHQgPSBKU09OLnBhcnNlKHByb2plY3RzSlNPTik7XG4gICAgY29uc3QgcmVzdWx0MiA9IHJlc3VsdC5tYXAoKHByb2plY3QpID0+IG5ldyBQcm9qZWN0KHByb2plY3QubmFtZSkpO1xuICAgIGNvbnN0IHJlc3VsdDMgPSByZXN1bHQyLm1hcCgob2JqLCBpKSA9PiBPYmplY3QuYXNzaWduKG9iaiwgcmVzdWx0W2ldKSk7XG4gICAgcmV0dXJuIHJlc3VsdDM7XG4gIH1cblxuICBnZXRCYXNlKGJhc2VKU09OKSB7XG4gICAgY29uc3QgSlNPTnJlc3VsdCA9IEpTT04ucGFyc2UoYmFzZUpTT04pO1xuICAgIGxldCByZXN1bHQgPSBuZXcgRGF0YSgpO1xuICAgIHJlc3VsdCA9IE9iamVjdC5hc3NpZ24ocmVzdWx0LCBKU09OcmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgc2F2ZURhdGEoYmFzZSkge1xuICAgIGNvbnN0IGJhc2VKU09OID0gSlNPTi5zdHJpbmdpZnkoYmFzZSk7XG4gICAgY29uc3QgcHJvamVjdHNKU09OID0gSlNPTi5zdHJpbmdpZnkoYmFzZS5wcm9qZWN0cyk7XG4gICAgY29uc3QgdG9kb3NKU09OID0gSlNPTi5zdHJpbmdpZnkoXG4gICAgICBiYXNlLnByb2plY3RzLm1hcCgocHJvamVjdCkgPT4gcHJvamVjdC50b2RvcylcbiAgICApO1xuXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jhc2UnLCBiYXNlSlNPTik7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Byb2plY3RzJywgcHJvamVjdHNKU09OKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndG9kb3MnLCB0b2Rvc0pTT04pO1xuXG4gICAgY29uc3QgYmFzZVJlc3VsdCA9IHRoaXMuZ2V0QmFzZShiYXNlSlNPTik7XG4gICAgY29uc3QgcHJvamVjdHNSZXN1bHQgPSB0aGlzLmdldFByb2plY3RzKHByb2plY3RzSlNPTik7XG4gICAgY29uc3QgdG9kb3NSZXN1bHQgPSB0aGlzLmdldFRvRG9zKHRvZG9zSlNPTik7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb2plY3RzUmVzdWx0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBwcm9qZWN0c1Jlc3VsdFtpXS50b2RvcyA9IHRvZG9zUmVzdWx0W2ldO1xuICAgIH1cblxuICAgIGJhc2VSZXN1bHQucHJvamVjdHMgPSBwcm9qZWN0c1Jlc3VsdDtcblxuICAgIGJhc2VSZXN1bHQuYWN0aXZlUHJvamVjdCA9IGJhc2VSZXN1bHQucHJvamVjdHNbMF07XG5cbiAgICByZXR1cm4gYmFzZVJlc3VsdDtcbiAgfVxuXG4gIGxvYWREYXRhKCkge1xuICAgIGNvbnN0IGJhc2VSZXN1bHQgPSB0aGlzLmdldEJhc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2Jhc2UnKSk7XG4gICAgY29uc3QgcHJvamVjdHNSZXN1bHQgPSB0aGlzLmdldFByb2plY3RzKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcm9qZWN0cycpKTtcbiAgICBjb25zdCB0b2Rvc1Jlc3VsdCA9IHRoaXMuZ2V0VG9Eb3MobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3RvZG9zJykpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9qZWN0c1Jlc3VsdC5sZW5ndGg7IGkrKykge1xuICAgICAgcHJvamVjdHNSZXN1bHRbaV0udG9kb3MgPSB0b2Rvc1Jlc3VsdFtpXTtcbiAgICB9XG5cbiAgICBiYXNlUmVzdWx0LnByb2plY3RzID0gcHJvamVjdHNSZXN1bHQ7XG5cbiAgICBiYXNlUmVzdWx0LmFjdGl2ZVByb2plY3QgPSBiYXNlUmVzdWx0LnByb2plY3RzWzBdO1xuICAgIHJldHVybiBiYXNlUmVzdWx0O1xuICB9XG59XG5cbi8v0KHQvdCw0YfQsNC70LAg0YHQvtC30LTQsNC10Lwg0LjQvdGB0YLQsNC90YEg0LrQu9Cw0YHRgdCwINGB0L4g0YHQstC+0LnRgdGC0LLQsNC80Lgg0LjQtyBKU09OID0+XG4vL9Ce0YHRgtCw0LvRjNC90L7QtSDQstC+0YHRgdGC0LDQvdCw0LLQu9C40LLQsNC10Lwg0YfQtdGA0LXQtyBPYmplY3QuYXNzaWduXG4iXSwibmFtZXMiOlsiRGF0YSIsImNvbnN0cnVjdG9yIiwidGhpcyIsInByb2plY3RzIiwiYWN0aXZlUHJvamVjdCIsImFkZFByb2plY3QiLCJwcm9qZWN0IiwicHVzaCIsInJlbW92ZVByb2plY3QiLCJQcm9qZWN0IiwibmFtZSIsInRvZG9zIiwiaWQiLCJhZGRUb0RvIiwidG9kbyIsInJlbW92ZVRvRG8iLCJmaW5kSW5kZXgiLCJlbGVtZW50Iiwic3BsaWNlIiwic2V0SWQiLCJmaW5kVG9Eb0J5SUQiLCJ0b2RvSWQiLCJUb0RvIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImRhdGUiLCJwcmlvcml0eSIsImlzRmluaXNoZWQiLCJwYXJlbnRJZCIsIm1hcmtBc0ZpbmlzaGVkIiwic2V0UGFyZW50SWQiLCJyZW5kZXJUb0RvIiwidWwiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJsaSIsImNyZWF0ZUVsZW1lbnQiLCJ0b2RvRWwiLCJ0b2RvRnVsbCIsImJ0bnNDb250YWluZXIiLCJkZWxldGVCdG4iLCJmaW5pc2hlZEJ1dG9uIiwic2hvd0Z1bGxCdG4iLCJjbGFzc0xpc3QiLCJhZGQiLCJ0ZXh0Q29udGVudCIsImFwcGVuZENoaWxkIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwic2V0QXR0cmlidXRlIiwicmVuZGVyRm9ybSIsImNvbnRhaW5lciIsImZvcm1Db250YWluZXIiLCJmb3JtRWwiLCJpbnNlcnRBZGphY2VudEVsZW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlIiwicmVuZGVyUHJvamVjdFByZXZpZXciLCJwcm9qZWN0RWwiLCJwcm9qZWN0UHJldmlldyIsInJlbmRlclRvRG9QcmV2aWV3IiwidG9kb1ByZXZpZXdFbCIsInJlbmRlckFsbFRvRG8iLCJjbGVhclRvRG9MaXN0IiwiZm9yRWFjaCIsImlubmVySFRNTCIsInRvZG9TaG93IiwidG9nZ2xlIiwicmVuZGVyQWxsUHJvamVjdFByZXZpZXciLCJiYXNlIiwicmVkbmVyQWxsVG9Eb1ByZXZpZXciLCJpIiwibGVuZ3RoIiwiY2xlYXJUb0RvUHJldmlldyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJwcmV2aWV3IiwidG9nZ2xlRmluaXNoZWRNYXJrIiwiaGFuZGxlclN1Ym1pdCIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJPYmplY3QiLCJmcm9tRW50cmllcyIsIkZvcm1EYXRhIiwic2xpY2UiLCJoZWxwZXIiLCJzYXZlRGF0YSIsImNvbnNvbGUiLCJsb2ciLCJtYXAiLCJiYXNlUmVzdWx0IiwiZ2V0VG9Eb3MiLCJ0b2Rvc0pTT04iLCJyZXN1bHQiLCJKU09OIiwicGFyc2UiLCJyZXN1bHQyIiwib2JqIiwiaW5kZXgiLCJhc3NpZ24iLCJnZXRQcm9qZWN0cyIsInByb2plY3RzSlNPTiIsImdldEJhc2UiLCJiYXNlSlNPTiIsIkpTT05yZXN1bHQiLCJzdHJpbmdpZnkiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwicHJvamVjdHNSZXN1bHQiLCJ0b2Rvc1Jlc3VsdCIsImxvYWREYXRhIiwiZ2V0SXRlbSIsInByb2plY3QxIiwidG9kbzEiLCJpbml0RGVmYXVsdFByb2plY3QiLCJidG5OZXciLCJmb3JtTmV3UHJvamVjdCIsImFzaWRlIiwiYnRuQ2xvc2UiLCJ0YXJnZXQiLCJjbG9zZXN0Iiwic2VsZWN0ZWRUb0RvIiwiZGF0YXNldCIsInByb2plY3ROYW1lIiwidmFsdWUiLCJuZXdQcm9qZWN0IiwiYWN0aXZlUHJvamVjdFNlbGVjdCIsImZpbmQiLCJ0b2RvU2hvd0J0biIsIm5leHRTaWJsaW5nIiwiYnRuTWFya0FzRmluaXNoZWQiXSwic291cmNlUm9vdCI6IiJ9