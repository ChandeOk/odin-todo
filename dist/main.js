(()=>{"use strict";class e{constructor(){this.projects=[],this.activeProject,console.log(this.projects)}addProject(e){return this.projects.push(e),this.projects}removeProject(e){}}class t{constructor(e){this.name=e,this.todos=[],this.id}addToDo(e){this.todos.push(e)}removeToDo(e){const t=this.todos.findIndex((t=>t.id===e));this.todos.splice(t,1),console.log(this.todos)}setId(e){this.id=e}findToDoByID(e){const t=this.todos.findIndex((t=>t.id===e));return this.todos[t]}}class o{constructor(e,t,o,n){this.title=e,this.description=t,this.date=o,this.priority=n,this.isFinished=!1,this.id,this.parentId}markAsFinished(){this.isFinished=!1===this.isFinished}setId(e){this.id=e}setParentId(e){this.parentId=e}}new class{constructor(){}};const n=new class{constructor(){}renderToDo=e=>{const t=document.querySelector("ul"),o=document.createElement("li"),n=document.createElement("div"),s=document.createElement("div"),i=document.createElement("div"),r=document.createElement("div"),l=document.createElement("div"),c=document.createElement("div"),d=document.createElement("div");d.classList.add("title-element"),n.classList.add("todo"),d.textContent=e.title,n.classList.add(`${e.priority}`),r.textContent="delete",r.classList.add("delete"),l.classList.add("finish"),l.textContent="mark",c.classList.add("show-full"),c.textContent="+",i.classList.add("btns-container"),i.appendChild(c),i.appendChild(l),i.appendChild(r),n.appendChild(d),n.appendChild(i),o.appendChild(n),s.classList.add("todo-full"),s.classList.add("hidden"),s.insertAdjacentHTML("afterbegin",`\n    \n    <p>\n      Description: ${e.description}\n    </p>\n    <p>Date: ${e.date}</p>`),o.appendChild(s),o.setAttribute("data-id",`${e.id}`),t.appendChild(o)};renderForm(){if(document.querySelector(".new-form-container"))return;const e=document.querySelector(".container"),t=document.createElement("div");t.classList.add("new-form-container");const o=document.createElement("form");o.setAttribute("action","submit"),o.insertAdjacentHTML("afterbegin",'<div class="field">\n<label for="title">Title: </label>\n<input type="text" name="title" id="title" required/>\n</div>\n<div class="field">\n<label for="description">Description: </label>\n<input type="text" name="description" id="description" required/>\n</div>\n<div class="field">\n<label for="date">Date: </label>\n<input type="date" name="date" id="date" required/>\n</div>\n<div class="radio-btn">\n<label for="low-prio">Low</label>\n<input type="radio" name="priority" id="low-prio" value="low" />\n<label for="med-prio">Medium</label>\n<input type="radio" name="priority" id="med-prio" value="med" />\n<label for="high-prio">High</label>\n<input type="radio" name="priority" id="high-prio" value="high" checked/>\n</div>\n<button type="submit">Submit</button>\n<div class="close-form"><div class="x">X</div></div>\n'),t.appendChild(o),e.insertAdjacentElement("afterbegin",t),document.querySelector(".close-form").addEventListener("click",(function(){t.remove()}))}renderProjectPreview(e){const t=document.createElement("div");t.classList.add("project");const o=document.createElement("div");o.classList.add("project-preview"),console.log(e.name,e),o.textContent=`${e.name}`,t.setAttribute("data-id",`${e.id}`),t.appendChild(o),document.querySelector(".project-container").appendChild(t)}renderToDoPreview(e){console.log("render start");const t=document.createElement("div");t.classList.add("todo-preview"),t.textContent=`${e.title}`,document.querySelector(`.project[data-id='${e.parentId}']`).insertAdjacentElement("beforeend",t)}renderAllToDo(e){this.clearToDoList(),e.forEach((e=>this.renderToDo(e)))}clearToDoList(){document.querySelector(".todos-list ul").innerHTML=""}todoShow(e){console.log(e),e.classList.toggle("hidden")}renderAllProjectPreview(e){e.projects.forEach((e=>this.renderProjectPreview(e)))}rednerAllToDoPreview(e){console.log(e.projects),e.projects.todos&&e.projects.forEach((e=>e.todos.forEach((e=>this.renderToDoPreview(e)))))}clearToDoPreview(){document.querySelectorAll(".todo-preview").forEach((e=>e.remove()))}toggleFinishedMark(e){e.querySelector(".title-element").classList.toggle("finished"),e.querySelector(".todo-full").classList.toggle("finished")}};console.log("START");let s=new e;const i=new class{constructor(e){this.base=e,this.projects=e.projects,this.todos=this.projects.map((e=>e.todos))}getToDos(e){const t=JSON.parse(e);for(let e=0;e<t.length;e++)t[e]=t[e].map((e=>new o(e.title,e.description,e.date,e.priority)));for(let e=0;e<t.length;e++)t[e]=t[e].map(((t,o)=>Object.assign(t,this.todos[e][o])));return t}getProjects(e){let o=JSON.parse(e);return o=o.map((e=>new t(e.name))),o=o.map(((e,t)=>Object.assign(e,this.projects[t]))),o}getBase(t){const o=JSON.parse(t);let n=new e;return n=Object.assign(n,o),n}saveData(){const e=JSON.stringify(this.base),t=JSON.stringify(this.projects),o=JSON.stringify(this.todos);localStorage.setItem("base",e),localStorage.setItem("projects",t),localStorage.setItem("todos",o),console.log(e),console.log(t),console.log(o);const n=this.getBase(e),s=this.getProjects(t),i=this.getToDos(o);console.log(i),console.log(s),console.log(n);for(let e=0;e<s.length;e++)s[e].todos=i[e];return console.log("--------------------------------"),n.projects=s,console.log(n),n}loadData(){}}(s),r=new t("Project Default");s.addProject(r),localStorage.base&&localStorage.projects&&localStorage.todos&&(console.log(JSON.parse(localStorage.base)),s=i.saveData()),s.activeProject=r;let l=s.activeProject;console.log(s),n.renderAllProjectPreview(s),n.rednerAllToDoPreview(s),n.renderAllToDo(l.todos);const c=document.querySelector(".new-todo-btn"),d=document.querySelector(".project-form"),a=document.querySelector("aside");c.addEventListener("click",(function(){n.renderForm(),document.querySelector("form").addEventListener("submit",u)}));const u=function(e){e.preventDefault();const{title:t,description:s,date:i,priority:r}=Object.fromEntries(new FormData(this)),c=new o(t,s,i,r);c.setId(l.todos.length+1),c.setParentId(l.id),l.addToDo(c),n.renderToDo(...l.todos.slice(-1)),console.log(l.todos.slice(-1)),n.renderToDoPreview(c)};document.querySelector("ul").addEventListener("click",(e=>{const t=e.target.closest(".delete");if(!t)return;const o=t.closest("li");l.removeToDo(+o.dataset.id),o.remove(),n.clearToDoPreview(),n.rednerAllToDoPreview(s)})),d.addEventListener("submit",(function(e){e.preventDefault();const o=this.querySelector("input").value;console.log(o),console.log("clickclack");const i=new t(o);i.setId(s.projects.length+1),s.addProject(i),this.querySelector("input").value="",console.log(s.projects),console.log(s),n.renderProjectPreview(i)})),a.addEventListener("click",(function(e){const t=e.target.closest(".project-preview");t&&t.textContent!==l.name&&(console.log("project selected"),console.log(t),l=s.projects.find((e=>e.name===t.textContent)),console.log(l),n.renderAllToDo(l.todos),console.log(l.todos),console.log(s))})),document.querySelector("ul").addEventListener("click",(function(e){const t=e.target.closest(".show-full");t&&(console.log(t),t.textContent="+"===t.textContent?"-":"+",n.todoShow(t.closest(".todo").nextSibling))})),document.querySelector("ul").addEventListener("click",(function(e){const t=e.target.closest(".finish");if(!t)return;const o=t.closest("li");console.log(o.dataset.id),console.log(l.findToDoByID(+o.dataset.id)),l.findToDoByID(+o.dataset.id).markAsFinished(),n.toggleFinishedMark(o)})),i.saveData()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,